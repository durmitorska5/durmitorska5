{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Button/Button.js","components/UI/Spinner/Spinner.js","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","index","key","displayValue","label","button","disabled","onClick","clicked","children","spinner","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","this","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","errorMessage","error","class","EMAIL_NOT_FOUND","INVALID_PASSWORD","INVALID_EMAIL","MISSING_PASSWORD","message","authRedirect","isAuthenticated","to","onSubmit","loading","Component","connect","auth","token","dispatch","actions"],"mappings":"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","file":"static/js/3.22be373c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Input.css\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [\"InputElement\"];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(\"Invalid\");\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className=\"InputElement\"\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option, index) => (\n            <option key={index} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n  }\n\n  return (\n    <div className=\"Input\">\n      <label className=\"Label\">{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","import React from \"react\";\n\nimport \"./Button.css\";\n\nconst button = (props) => (\n  <button\n    disabled={props.disabled}\n    className={props.className}\n    onClick={props.clicked}\n  >\n    {props.children}\n  </button>\n);\n\nexport default button;\n","import React from 'react';\n\nimport './Spinner.css'\n\nconst spinner = () => (\n    <div className=\"Loader\">\n        <div className=\"Ring\" />\n        <div className=\"Ring\" />\n        <div className=\"Ring\" />\n        <div className=\"Ring\" />\n    </div>\n);\n\nexport default spinner;\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\n\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Korisnicko ime\",\n        },\n\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n\n        valid: false,\n        touched: false,\n      },\n\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Lozinka\",\n        },\n\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n\n        valid: false,\n        touched: false,\n      },\n    },\n\n    isSignup: false,\n  };\n\n  componentDidMount() {\n    if (this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n\n    this.setState({\n      controls: updatedControls,\n    });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    let errorMessage = null;\n\n    const errorMapping = {\n      EMAIL_NOT_FOUND: \"Email nije pronadjen u bazi stanara\",\n      INVALID_PASSWORD: \"Pogresna lozinka\",\n      INVALID_EMAIL: \"Pogresna email adresa\",\n      MISSING_PASSWORD: \"Molimo unesite lozinku\",\n    };\n\n    if (this.props.error) {\n      errorMessage = (\n        <p class=\"Error\">\n          {\" \"}\n          {errorMapping[this.props.error.message] || this.props.error.message}\n        </p>\n      );\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className=\"Auth\">\n        {\" \"}\n        {authRedirect}\n        <form onSubmit={this.submitHandler}>\n          {\" \"}\n          <h2>Durmitorska 5 online</h2> {form}\n          <Button className=\"Button Success AuthButton\">Uloguj se</Button>{\" \"}\n        </form>{\" \"}\n        {this.props.loading && <Spinner />}\n        {errorMessage}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}